// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma"
  output   = "../zod" // (default) the directory where generated zod schemas will be saved

  relationModel = false // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model AdminStatus {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(20)
  isDeleted Boolean  @default(false) @map("is_deleted") @db.Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  admins    Admin[]

  @@map("admin_status")
}

model AdminRole {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(20)
  isDeleted Boolean  @default(false) @map("is_deleted") @db.Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  admins    Admin[]

  @@map("admin_role")
}

model Admin {
  id         Int         @id @default(autoincrement())
  firstname  String      @map("first_name") @db.VarChar(300)
  lastname   String      @map("last_name") @db.VarChar(300)
  /// @zod.min(8,{message: 'Password length should be minimum 8 characters'})
  password   String      @db.VarChar(1024)
  salt       String      @db.VarChar(1024)
  /// @zod.email('Not a valid email')
  email      String      @db.VarChar(300)
  roleId     Int         @map("role_id")
  role       AdminRole   @relation(fields: [roleId], references: [id])
  statusId   Int         @map("status_id")
  status     AdminStatus @relation(fields: [statusId], references: [id])
  lastActive DateTime?   @map("last_active") @db.Timestamptz()
  isDeleted  Boolean     @default(false) @map("is_deleted") @db.Boolean
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime    @default(now()) @map("updated_at") @db.Timestamptz()
  createdBy  Int?        @map("created_by")
  updatedBy  Int?        @map("updated_by")

  @@map("admin")
}

model LookbookStatus {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(20)
  isDeleted Boolean    @default(false) @map("is_deleted") @db.Boolean
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime   @default(now()) @map("updated_at") @db.Timestamptz()
  lookbooks Lookbook[]
  looks     Look[]

  @@map("lookbook_status")
}

model Lookbook {
  id         Int            @id @default(autoincrement())
  customerId Int            @map("customer_id")
  noOfLooks  Int            @map("no_of_looks") // no of looks to be created in lookbook based on subscription
  statusId   Int            @map("status_id")
  status     LookbookStatus @relation(fields: [statusId], references: [id])
  occasion   String         @db.VarChar(300)
  dueBy      DateTime       @map("due_by") @db.Timestamptz()
  sentAt     DateTime?      @map("sent_at") @db.Timestamptz()
  isDeleted  Boolean        @default(false) @map("is_deleted") @db.Boolean
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime       @default(now()) @map("updated_at") @db.Timestamptz()
  createdBy  Int?           @map("created_by")
  updatedBy  Int?           @map("updated_by")
  looks      Look[]

  @@map("lookbook")
}

model Look {
  id         Int            @id @default(autoincrement())
  customerId Int            @map("customer_id")
  lookbookId Int            @map("lookbook_id")
  lookbook   Lookbook       @relation(fields: [lookbookId], references: [id])
  statusId   Int            @map("status_id")
  status     LookbookStatus @relation(fields: [statusId], references: [id])
  occasion   String         @db.VarChar(300)
  isDeleted  Boolean        @default(false) @map("is_deleted") @db.Boolean
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime       @default(now()) @map("updated_at") @db.Timestamptz()
  createdBy  Int?           @map("created_by")
  updatedBy  Int?           @map("updated_by")
  lookItems  LookItems[]

  @@map("look")
}

model Item {
  id            Int         @id @default(autoincrement())
  url           String      @db.VarChar(1024)
  imageUrl      String      @map("image_url") @db.VarChar(1024)
  name          String      @db.VarChar(300)
  price         Int
  itemType      Int[]       @map("item_type")
  attireType    Int[]       @map("attire_type")
  wearType      Int[]       @map("wear_type")
  season        Int[]       @map("season")
  color         Int[]       @map("color")
  fit           Int[]       @map("fit")
  waistLocation Int[]       @map("waist_location")
  keyword       Int[]       @map("keyword")
  sizeAvailable Int[]       @map("size_available")
  isDeleted     Boolean     @default(false) @map("is_deleted") @db.Boolean
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime    @default(now()) @map("updated_at") @db.Timestamptz()
  lookItems     LookItems[]

  @@map("item")
}

model LookItems {
  id        Int      @id @default(autoincrement())
  lookId    Int      @map("look_id")
  look      Look     @relation(fields: [lookId], references: [id])
  itemId    Int      @map("item_id")
  item      Item     @relation(fields: [itemId], references: [id])
  isDeleted Boolean  @default(false) @map("is_deleted") @db.Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  createdBy Int?     @map("created_by")
  updatedBy Int?     @map("updated_by")

  @@map("look_items")
}
